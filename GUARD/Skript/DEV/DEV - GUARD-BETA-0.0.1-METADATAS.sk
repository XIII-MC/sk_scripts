options:
   guard: &9&lGUARD &8Â»&f
   version: BETA-0.0.1
   TestServer: false

   #ONLY FOR MINEHUT!
   IgnoreBedrock: true 
   
   #Auto kick haXors
   AutoKick: true

   #Permissions

   AlertsPermission: guard.command.alerts
   KickPermission: guard.command.kick
   ClearCachePermission: guard.command.clearcache
   ClearVlsCachePermission: guard.command.clearvls
   VersionPermission: guard.command.version

function GDC_Ground_D(p: player):
  {_p} is not on ground
  GDA_returnTimeSpan({_p}, "LOWBLOCK") > 0.6
  GDA_returnTimeSpan({_p}, "SLIME") > 0.8
  GDA_returnTimeSpan({_p}, "ABOVETICKS") > 0.6
  GDA_returnTimeSpan({_p}, "ABOVEAT") > 0.6
  {_p} is not riding
  GDA_returnTimeSpan({_p}, "MOUNT") > 0.6
  GDA_returnTimeSpan({_p}, "LAGBACK") > 0.8
  GA_clearly({_p}, "Ground", "D", "Spoofed Ground", 3, "D", "%{_y}%", 0.5, 3) if GDA_getDeltaY({_p}, 1, false) = 0
  if GDA_getDeltaY({_p}, 1, false) != 0:
    remove 0.5 from {GUARD::%{_p}%::TEMP::VL::GROUND.D} if {GUARD::%{_p}%::TEMP::VL::GROUND.D} >= 0.5

function GDC_Jesus_A(p: player):
  set {_t} to GDA_getLastBlock({_p}, water, "LIQUIDUNDER", 0.01)
  send "%{_t}%" to {_p}
  delete {GUARD::%{_p}%::TEMP::VL::JESUS.B} if GDA_getLastBlock({_p}, water, "LIQUIDUNDER", 0.01) is not set
  delete {GUARD::%{_p}%::TEMP::VL::JESUS.A} if GDA_getLastBlock({_p}, water, "LIQUIDUNDER", 0.01) is not set
  GDA_returnTimeSpan({_p}, "LOWBLOCK") > 0.6
  GDA_returnTimeSpan({_p}, "ABOVETICKS") > 0.6
  GDA_getLastBlock({_p}, water, "LIQUIDUNDER", 0.01) >= 0
  GA_clearly({_p}, "Jesus", "B", "Walking On Water", 5, "B", "%GDA_getDeltaY({_p}, 1, true)%", 1, 3) if GDA_getDeltaY({_p}, 1, true) = 0
  GA_clearly({_p}, "Jesus", "A", "Walking On Water", 5, "A", "NaN", 0, 0) if block at {_p} is air

function GDC_Jesus_C(p: player):
  delete {GUARD::%{_p}%::TEMP::VL::JESUS.C} if block at {_p} is air
  delete {GUARD::%{_p}%::TEMP::VL::JESUS.D} if GDA_getLastBlock({_p}, lava, "LIQUIDUNDER", 0.01) is not set
  GDA_returnTimeSpan({_p}, "LOWBLOCK") > 0.6
  GDA_returnTimeSpan({_p}, "ABOVETICKS") > 0.6
  GDA_getLastBlock({_p}, lava, "LIQUIDUNDER", 0.01) >= 0
  GA_clearly({_p}, "Jesus", "C", "Walking On Water", 5, "C", "%GDA_getDeltaY({_p}, 1, true)%", 1, 3) if GDA_getDeltaY({_p}, 1, true) = 0
  GA_clearly({_p}, "Jesus", "D", "Walking On Water", 5, "D", "NaN", 0, 0) if block at {_p} is air

function GDC_Motion_D(p: player):
  GDA_returnTimeSpan({_p}, "LOWBLOCK") > 0.2
  GDA_returnTimeSpan({_p}, "SOULSAND") > 0.6
  GDA_returnTimeSpan({_p}, "SLIME") > 0.8
  GDA_returnTimeSpan({_p}, "ABOVETICKS") > 0.6
  GDA_returnTimeSpan({_p}, "MOUNT") > 0.6
  GDA_returnTimeSpan({_p}, "ATLIQUID") > 0.6
  GDAR_getLastAt({_p}, lava, "LIQUIDAT") >= 0
  GDAR_getLastAt({_p}, water, "LIQUIDAT") >= 0
  GDA_returnTimeSpan({_p}, "UNSAFEDAMAGE") > 1.2
  GDA_returnTimeSpan({_p}, "SLIMESTOP") > 0.6
  GDA_returnTimeSpan({_p}, "ABOVEAT") > 0.6
  GDA_returnTimeSpan({_p}, "JUMPBOOST") > 0.6
  GDA_returnTimeSpan({_p}, "PLACE") > 0.8
  if GDA_getDeltaY({_p}, 1, false) > 0:
    set {GUARD::%{_p}%::TEMP::MOTION.D::TICK} to {GUARD::%{_p}%::TEMP::MOTION.D::TICK} + 1
    if {GUARD::%{_p}%::TEMP::MOTION.D::TICK} = 1:
      if GDA_getDeltaY({_p}, 1, false) > 0:
        GA_clearly({_p}, "Motion", "D", "Jumped too low", 20, "D", "%GDA_getDeltaY({_p}, 1, false)%", 1, 6) if GDA_getDeltaY({_p}, 1, false) != 0.41999998688697815
        send "%{GUARD::%{_p}%::TEMP::VL::MOTION.D}%" to {_p} if {_p} is op
  set {GUARD::%{_p}%::TEMP::MOTION.D::TICK} to 0 if GDA_getDeltaY({_p}, 1, false) <= 0
  delete {GUARD::%{_p}%::TEMP::VL::MOTION.D} if GDA_getDeltaY({_p}, 1, false) = 0.41999998688697815

on damage:
  cancel event if difference between metadata value "GUARD-TEMP-TIMESPAN-LASTATTACK" of attacker and now < 0.03
  set metadata value "GUARD-TEMP-TIMESPAN-LASTATTACK" of attacker to unix timestamp of now
  GA_clearly(attacker, "Aim", "A", "Impossible Angle", 1, "A", "NaN", 0, 0) if ((attacker's pitch / (attacker's pitch * 8)) ^ 1) != 0.125

function getDev(a: number, b: number) :: number: 
  if {_a} < {_b}:
    return getDev({_b}, {_a})
  if abs({_b}) < 0.001:
    return {_a}
  else:
    return getDev({_b}, {_a} - floor({_a} / {_b}) * {_b})

function GDC_BadPacket_A(p: player):
  if {_p} is riding:
    GA_clearly({_p}, "BadPacket", "A", "Impossible Riding", 1, "A", "NaN", 1, 0) if {GUARD::%{_p}%::TEMP::MOUNTSTATE} is not set

function GDC_BadPacket_B(p: player):
  if {_p}'s hunger level <= 3:
    GA_clearly({_p}, "BadPacket", "B", "Impossible Sprinting", 1, "B", "NaN", 1, 0) if {_p} is sprinting

function GDC_Strafe_AB(p: player):
  GDA_returnValue({_p}, "AIRTICKS") > 3
  GDA_returnTimeSpan({_p}, "ABOVETICKS") > 0.8
  GDA_returnTimeSpan({_p}, "ICE") > 0.8
  GDA_returnTimeSpan({_p}, "UNSAFEDAMAGE") > 1.2
  GA_clearly({_p}, "Strafe", "A", "Strafing in air", 5, "A", "%((GDA_getDeltaX({_p}, 1) + GDA_getDeltaZ({_p}, 1)) ^ 2 - ((GDA_getDeltaX({_p}, 2) + GDA_getDeltaZ({_p}, 2)) ^ 3  * 0.91))%", 1, 1) if ((GDA_getDeltaX({_p}, 1) + GDA_getDeltaZ({_p}, 1)) ^ 2 - ((GDA_getDeltaX({_p}, 2) + GDA_getDeltaZ({_p}, 2)) ^ 3  * 0.91)) > 0.1203
  if {GUARD::%{_p}%::TEMP::VL::STRAFE.A} >= 0.5:
    remove 0.5 from {GUARD::%{_p}%::TEMP::VL::STRAFE.A} if ((GDA_getDeltaX({_p}, 1) + GDA_getDeltaZ({_p}, 1)) ^ 2 - ((GDA_getDeltaX({_p}, 2) + GDA_getDeltaZ({_p}, 2)) ^ 3  * 0.91)) < 0.1202
  GA_clearly({_p}, "Strafe", "B", "Strafing in air", 3, "B", "%((GDA_getDeltaX({_p}, 1) + GDA_getDeltaZ({_p}, 1)) ^ 2 - ((GDA_getDeltaX({_p}, 2) + GDA_getDeltaZ({_p}, 2)) ^ 2 * 0.91))%", 1, 5) if ((GDA_getDeltaX({_p}, 1) + GDA_getDeltaZ({_p}, 1)) ^ 2 - ((GDA_getDeltaX({_p}, 2) + GDA_getDeltaZ({_p}, 2)) ^ 2 * 0.91)) is not between -0.05 and 0.02
  if {GUARD::%{_p}%::TEMP::VL::STRAFE.B} >= 0.5:
    remove 0.5 from {GUARD::%{_p}%::TEMP::VL::STRAFE.B} if ((GDA_getDeltaX({_p}, 1) + GDA_getDeltaZ({_p}, 1)) ^ 2 - ((GDA_getDeltaX({_p}, 2) + GDA_getDeltaZ({_p}, 2)) ^ 2 * 0.91)) is between -0.05 and 0.02

function GDC_Speed_A(p: player):
  GDA_returnTimeSpan({_p}, "MOUNT") > 1.2
  set {_speed} to GDA_getDeltaLoc({_p}, 1, true)
  set {GUARD::%{_p}%::TEMP::SPEED.DIFF} to 0 if {GUARD::%{_p}%::TEMP::SPEED.DIFF} is not set
  set {_maxspeed} to 0.68 if GDA_returnTimeSpan({_p}, "ABOVETICKS") < 0.6
  set {_maxspeed} to 0.33844464 if GDA_returnTimeSpan({_p}, "ABOVETICKS") > 0.6
  set {_maxspeed} to 0.2868198 if GDA_returnValue({_p}, "GROUNDTICKS") > 7
  if GDA_returnTimeSpan({_p}, "ICE") < 1.2:
    set {_maxspeed} to 0.48 if GDA_returnTimeSpan({_p}, "ABOVETICKS") > 1.6
    set {_maxspeed} to 1 if GDA_returnTimeSpan({_p}, "ABOVETICKS") < 1.6
    if GDA_returnTimeSpan({_p}, "ICE") < 0.1:
      set {_maxspeed} to 0.2757 if GDA_returnValue({_p}, "GROUNDTICKS") > 22
    if {GUARD::%{_p}%::TEMP::SPEEDPOT::TIER} = 1:
      set {_maxspeed} to 0.32427 if GDA_returnValue({_p}, "GROUNDTICKS") > 7
    if {GUARD::%{_p}%::TEMP::SPEEDPOT::TIER} >= 2:
      set {_maxspeed} to 0.37831 if GDA_returnValue({_p}, "GROUNDTICKS") > 7
  if GDA_returnTimeSpan({_p}, "SLIME") < 1:
    GDA_getLastBlock({_p}, water, "WATER", 1) is not set
    set {_maxspeed} to 0.4 if GDA_returnTimeSpan({_p}, "ABOVETICKS") > 0.6
    set {_maxspeed} to 0.74 if GDA_returnTimeSpan({_p}, "ABOVETICKS") < 0.6
    GDA_returnTimeSpan({_p}, "SLIME") < 0.1
    set {_maxspeed} to 0.09 if GDA_returnValue({_p}, "GROUNDTICKS") > 14
  if GDA_returnTimeSpan({_p}, "ABOVETICKS") > 0.6:
    #teleport {_p} to {GUARD::%{_p}%::TEMP::LAGBACK} if {_speed} > 0.68
    GDA_returnTimeSpan({_p}, "KBDAMAGE") > 1.2
    set {_maxspeed} to 0.68
  if GDA_returnTimeSpan({_p}, "ABOVETICKS") < 0.6:
    #teleport {_p} to {GUARD::%{_p}%::TEMP::LAGBACK} if {_speed} > 1.1
    GDA_returnTimeSpan({_p}, "KBDAMAGE") > 1.2
    set {_maxspeed} to 1.1
  if GDA_getLastBlock({_p}, water, "WATER", 1) > 0.6:
    set {_maxspeed} to 0.13
  if GDA_returnTimeSpan({_p}, "LOWBLOCK") < 0.3:
    GDA_returnTimeSpan({_p}, "KBDAMAGE") > 1.2
    set {_maxspeed} to 0.42
  set {_maxspeed} to 0.8062 if block at {_p} is cobweb
  if GDA_returnValue({_p}, "CLIMABLETICKS") > 8:
    set {_maxspeed} to 0.2
  if GDA_returnTimeSpan({_p}, "SPEEDPOT") < 1.6:
    set {GUARD::%{_p}%::TEMP::SPEEDPOT::TIER} to tier of potion effect speed of {_p}
    set {_maxspeed} to 0.4 if GDA_returnTimeSpan({_p}, "ABOVETICKS") < 0.6
    if {GUARD::%{_p}%::TEMP::SPEEDPOT::TIER} = 1:
      set {_maxspeed} to 0.34361233 if GDA_returnTimeSpan({_p}, "ABOVETICKS") > 0.6
    if {GUARD::%{_p}%::TEMP::SPEEDPOT::TIER} >= 2:
      set {_maxspeed} to (0.17622432 * {GUARD::%{_p}%::TEMP::SPEEDPOT::TIER}) if GDA_returnTimeSpan({_p}, "ABOVETICKS") > 0.6
      set {_maxspeed} to (0.20044054 * {GUARD::%{_p}%::TEMP::SPEEDPOT::TIER}) if GDA_returnValue({_p}, "GROUNDTICKS") > 7
  if GDA_returnTimeSpan({_p}, "KBDAMAGE") > 1.2:
    GDA_returnTimeSpan({_p}, "ICE") > 1.2
    GDA_returnTimeSpan({_p}, "SLIME") > 1.2
    GDA_returnTimeSpan({_p}, "FLY") > 2
    GA_clearly({_p}, "Speed", "A", "Speed Limit", 5, "AA", "%{_speed}%", 1, 2) if difference between {GUARD::%{_p}%::TEMP::SPEED.DIFF} and GDA_getDeltaLoc({_p}, 1, true) > 0.68
  set {_maxspeed} to 0.63 if GDA_returnTimeSpan({_p}, "DAMAGE") < 0.8
  if GDA_returnTimeSpan({_p}, "KBDAMAGE") < 1.2:
    set {_maxspeed} to {GUARD::%{_p}%::TEMP::KBENCHANT} * 0.7
  if {_p} is swimming:
    set {_maxspeed} to 0.19596137
    if {_p}'s boots are enchanted with depth strider:
      set {_tier} to enchantment level of depth strider of {_p}'s boots
      set {_maxspeed} to 0.23625096 if {_tier} = 1 
      set {_maxspeed} to 0.254699 if {_tier} = 2 
      set {_maxspeed} to 0.2653481 if {_tier} = 3
      set {_maxspeed} to 0.0683204 * {_tier} if {_tier} > 3
  GA_clearly({_p}, "Speed", "A", "Speed Limit", 5, "A", "%{_speed}%&7/&9%{_maxspeed}%", 1, 6) if {_speed} > {_maxspeed}
  if {GUARD::%{_p}%::TEMP::VL::SPEED.A} >= 1:
    remove 1 from {GUARD::%{_p}%::TEMP::VL::SPEED.A} if {_speed} < {_maxspeed}
  if {GUARD::%{_p}%::TEMP::VL::SPEED.AA} >= 0.05:
    remove 0.05 from {GUARD::%{_p}%::TEMP::VL::SPEED.AA} if difference between {GUARD::%{_p}%::TEMP::SPEED.DIFF} and GDA_getDeltaLoc({_p}, 1, true) < 0.68

function GDC_Clip_A(p: player):
  GDA_returnTimeSpan({_p}, "FLY") > 2
  GDA_returnTimeSpan({_p}, "SLIMESTOP") > 3
  GDA_returnTimeSpan({_p}, "SLIME") > 0.6
  set {ylocclip.%{_p}%} to {_p}'s y location
  set {ymotionclip.%{_p}%} to {ylocclip.%{_p}%} - {ylocclip2.%{_p}%}
  set {_height} to 0.563
  add ({GUARD::%{_p}%::TEMP::JUMPBOOST} * 0.157) to {_height} if GDA_returnTimeSpan({_p}, "JUMPBOOST") < 0.6

  if {ymotionclip.%{_p}%} > {_height}:
    GA_clearly({_p}, "Clip", "A", "Teleported Up", 1, "A", "%{_ymotionclip.%{_p}%}%", 1, 3)
  set {ylocclip2.%{_p}%} to {_p}'s y location 
  if {ymotionclip.%{_p}%} < {_height}: 
    remove 0.05 from {GUARD::%{_p}%::TEMP::VL::CLIP.A} if {GUARD::%{_p}%::TEMP::VL::CLIP.A} >= 0.05

function GDC_Step_A(p: player):
  set {ylocstep.%{_p}%} to {_p}'s y location
  set {ymotionstep.%{_p}%} to {ylocstep.%{_p}%} - {ylocstep2.%{_p}%}
  if {ymotionstep.%{_p}%} > 0:
    GDA_returnTimeSpan({_p}, "SLIME") > 0.8 
    GDA_returnTimeSpan({_p}, "LOWBLOCK") > 0.6
    GDA_returnTimeSpan({_p}, "UNSAFEDAMAGE") > 1.2
    GDA_returnTimeSpan({_p}, "ABOVETICKS") > 0.6
    set {ticksstep.%{_p}%} to {ticksstep.%{_p}%} + 1
    if {ticksstep.%{_p}%} = 1:
      GDA_returnTimeSpan({_p}, "SOULSAND") > 0.6
      GDA_returnTimeSpan({_p}, "ATLIQUID") > 0.6
      GDAR_getLastAt({_p}, water, "LIQUIDAT") >= 0
      GDAR_getLastAt({_p}, lava, "LIQUIDAT") >= 0
      GDA_returnTimeSpan({_p}, "LOWBLOCK") > 0.8
      GDA_returnTimeSpan({_p}, "PLACE") > 1.2
      GDA_returnTimeSpan({_p}, "SLIMESTOP") > 0.6
      GDA_returnTimeSpan({_p}, "ABOVEAT") > 0.6
      GDA_returnTimeSpan({_p}, "JUMPBOOST") > 0.6
      if GDA_returnTimeSpan({_p}, "PLACE") < 0.6:
        if {ymotionstep.%{_p}%} != 0.4044449142 or 0.41999998688697815 or 0.3955759 or 0.0830778148:
          GA_clearly({_p}, "Step", "A", "Invalid y movement", 1, "A", "%{ymotionstep.%{_p}%}%", 0.5, 1)
      else:
        GA_clearly({_p}, "Step", "A", "Invalid y movement", 1, "A", "%{ymotionstep.%{_p}%}%", 0.5, 1) if {ymotionstep.%{_p}%} != 0.41999998688697815
  if {ymotionstep.%{_p}%} <= 0:
    if {ticksstep.%{_p}%} = 2:
      GA_clearly({_p}, "Step", "B", "Invalid y movement", 1, "B", "%{ymotionstep.%{_p}%}%", 0.5, 1)
      set {ticksstep.%{_p}%} to 0 
    if {ticksstep.%{_p}%} = 3:
      GA_clearly({_p}, "Step", "C", "Invalid y movement", 1, "C", "%{ymotionstep.%{_p}%}%", 0.5, 1)
      set {ticksstep.%{_p}%} to 0
    set {ticksstep.%{_p}%} to 0
  set {ylocstep2.%{_p}%} to {_p}'s y location
  if {GUARD::%{_p}%::TEMP::VL::STEP.B} >= 0.025:
    remove 0.025 from {GUARD::%{_p}%::TEMP::VL::STEP.B} if {ymotionstep.%{_p}%} > 0
  if {GUARD::%{_p}%::TEMP::VL::STEP.C} >= 0.025:
    remove 0.025 from {GUARD::%{_p}%::TEMP::VL::STEP.C} if {ymotionstep.%{_p}%} > 0
  if {GUARD::%{_p}%::TEMP::VL::STEP.A} >= 0.5:
    remove 0.5 from {GUARD::%{_p}%::TEMP::VL::STEP.A} if {ymotionstep.%{_p}%} = 0.41999998688697815

on place:
  if y coordinate of event-block < y coordinate of player:
    block under event-block is air or void air
    player's gamemode is not creative or spectator
    set {_pitch} to player's pitch
    set {_dist} to {_DistX} if {_DistX} > {_DistZ}
    set {_dist} to {_DistZ} if {_DistZ} > {_DistX}
    set {_predictedPitch} to {_pitch} if {_dist} < 1.2
    set {_predictedPitch} to {_pitch} if ({_dist} + 1.4) > 1.2
    GA_clearly(player, "Scaffold", "A", "Impossible Placement", 15, "A", "%{_predictedPitch}%", 0.5, 1) if {_predictedPitch} is not between 83.919 and 24
    if player is sprinting:
      GA_clearly(player, "Scaffold", "B", "Impossible Sprinting", 3, "B", "%{_predictedPitch}%", 0, 0) if {_predictedPitch} is between 73 and 83.919
    GA_clearly(player, "Scaffold", "C", "Impossible Placement", 3, "C", "NaN", 0.5, 2) if event-block is not player's targeted block 
    if {GUARD::%player%::TEMP::VL::SCAFFOLD.A} >= 0.25:
      remove 0.25 from {GUARD::%player%::TEMP::VL::SCAFFOLD.A} if {_predictedPitch} is between 73 and 83.919
    if {GUARD::%player%::TEMP::VL::SCAFFOLD.C} >= 0.25:
      remove 0.25 from {GUARD::%player%::TEMP::VL::SCAFFOLD.C} if event-block is player's targeted block 

function GDC_FastClimb_A(p: player):
  GDA_returnValue({_p}, "CLIMABLETICKS") > 3
  block 2 under {_p} is vines or ladders or Weeping vine or Weeping Vine block or twisting vine block or twisting vine
  block under {_p} is vines or ladders or Weeping vine or Weeping Vine block or twisting vine block or twisting vine
  block at {_p} is vines or ladders or Weeping vine or Weeping Vine block or twisting vine block or twisting vine
  GA_clearly({_p}, "FastClimb", "A", "Moved upwards too fast", 5, "A", "%GDA_getDeltaY({_p}, 1, false)%", 1, 1) if GDA_getDeltaY({_p}, 1, false) > 0.1177
  if {GUARD::%{_p}%::TEMP::VL::FASTCLIMB.A} >= 0.25:
    remove 0.25 from {GUARD::%{_p}%::TEMP::VL::FASTCLIMB.A} if GDA_getDeltaY({_p}, 1, false) < 0.1177

function GDC_Motion_C(p: player):
  {_p} is not on ground
  GDA_returnValue({_p}, "CLIMABLETICKS") = 0
  GDA_returnTimeSpan({_p}, "BUBBLE") > 0.6
  GDA_returnTimeSpan({_p}, "ATLIQUID") > 0.6
  GDAR_getLastAt({_p}, water, "LIQUIDAT") >= 0
  GDAR_getLastAt({_p}, lava, "LIQUIDAT") >= 0
  GDA_returnTimeSpan({_p}, "SLIMESTOP") > 0.6
  block at {_p} is not vines or ladders or Weeping vine or Weeping Vine block or twisting vine block or twisting vine
  block above {_p} is not vines or ladders or Weeping vine or Weeping Vine block or twisting vine block or twisting vine
  block under {_p} is not vines or ladders or Weeping vine or Weeping Vine block or twisting vine block or twisting vine
  add ({GUARD::%{_p}%::TEMP::JUMPBOOST}) to {_maxairticks} if GDA_returnTimeSpan({_p}, "JUMPBOOST") < 0.6
  add 3 to {_maxairticks} if GDA_returnTimeSpan({_p}, "UNSAFEDAMAGE") < 1
  add 7 to {_maxairticks}
  GA_clearly({_p}, "Motion", "C", "Added AirTicks", 5, "C", "%{GUARD::%{_p}%::TEMP::MOTIONC::AIRTICKS}%", 1, {_maxairticks}) if GDA_getDeltaY({_p}, 1, false) > 0
  delete {GUARD::%{_p}%::TEMP::VL::MOTION.C} if GDA_getDeltaY({_p}, 1, false) <= 0

function GDC_Motion_B(p: player):
  GDA_returnTimeSpan({_p}, "BUBBLE") > 0.6
  GDAR_getLastAt({_p}, water, "LIQUIDAT") >= 0
  GDA_returnTimeSpan({_p}, "ATLIQUID") > 0.6
  GDAR_getLastAt({_p}, lava, "LIQUIDAT") >= 0
  GDA_returnTimeSpan({_p}, "MOUNT") > 0.6
  GDA_returnTimeSpan({_p}, "SLIMESTOP") > 0.6
  GDA_returnTimeSpan({_p}, "JUMPBOOST") > 0.6
  set {_y} to (GDA_getDeltaY({_p}, 1, false) + GDA_getDeltaY({_p}, 1, false) * 8) ^ 1 
  if {_y} > 3:
    GDA_returnTimeSpan({_p}, "LOWBLOCK") > 0.6
    GA_clearly({_p}, "Motion", "B", "Impossible y motion", 3, "B", "%{_y}%", 2, 4)
  else:
    remove 0.5 from {GUARD::%{_p}%::TEMP::VL::MOTION.B} if {GUARD::%{_p}%::TEMP::VL::MOTION.B} >= 0.5

function GDC_Motion_A(p: player):
  GDA_returnTimeSpan({_p}, "LOWBLOCK") > 0.6
  GDA_returnTimeSpan({_p}, "BUBBLE") > 0.6
  GDA_returnTimeSpan({_p}, "ATLIQUID") > 0.6
  GDA_returnTimeSpan({_p}, "DAMAGE") > 1.2
  GDA_returnValue({_p}, "CLIMABLETICKS") = 0
  set {_diffy} to GDA_getDeltaY({_p}, 1, true)
  if {_diffy} != 0:
    if "%{_diffy}%" = "%{GUARD::%{_p}%::TEMP::LASTYPOS}%":
      GA_clearly({_p}, "Motion", "A", "Motion y motion", 3, "A", "%{_diffy}%", 1, 4) if "%{_diffy}%" != "0.08"
    else:
      set {GUARD::%{_p}%::TEMP::LASTYPOS} to {_diffy}
  if "%{_diffy}%" != "%{GUARD::%{_p}%::TEMP::LASTYPOS}%":
    delete {GUARD::%{_p}%::TEMP::VL::MOTION.A} if {GUARD::%{_p}%::TEMP::VL::MOTION.A} >= 0.05

function GDC_Ground_C(p: player):
  set {GUARD::%{_p}%::TEMP::NOFALLY4} to {_p}'s y location if GDA_getDeltaY({_p}, 1, false) > 0
  if GDA_getDeltaY({_p}, 1, false) < 0:
    set {_y} to {_p}'s y location
    GDA_getLastBlock({_p}, air, "AIR", 1) >= 0
    GDA_returnTimeSpan({_p}, "ATLIQUID") > 0.6
    GDA_returnTimeSpan({_p}, "DAMAGE") > 1.2
    #GA_clearly({_p}, "Ground", "C", "Invalid fall distance", 3, "C", "%difference between round(GDA_getDeltaY({_p}, 1, true)) and round({_p}'s fall distance)%", 1, 3) if difference between round({GUARD::%{_p}%::TEMP::NOFALLY4} - {_y}) and round({_p}'s fall distance) != 0
  set {GUARD::%{_p}%::TEMP::NOFALLY4} to {_p}'s y location if GDA_getDeltaY({_p}, 1, false) = 0
  if {GUARD::%{_p}%::TEMP::VL::GROUND.C} >= 0.25:
    remove 0.25 from {GUARD::%{_p}%::TEMP::VL::GROUND.C} if difference between round({GUARD::%{_p}%::TEMP::NOFALLY4} - {_y}) and round({_p}'s fall distance) = 0

on inventory click: 
  set metadata value "GUARD-TEMP-INVSTATE" of player to true
  GA_clearly(player, "Inventory", "A", "Clicked inventory while sprinting", 3, "A", "NaN", 1, 0) if player is sprinting
  GA_clearly(player, "Inventory", "A", "Clicked inventory while sneaking", 3, "A", "NaN", 1, 0) if player is sneaking

on sprint toggle:
  GA_clearly(player, "Inventory", "A", "Clicked inventory while sprint toggle", 3, "A", "NaN", 1, 0) if metadata value "GUARD-TEMP-INVSTATE" of player is set

on inventory close:
  delete metadata value "GUARD-TEMP-INVSTATE" of player
  delete {GUARD::%player%::TEMP::VL::INVENTORY.A}

function GDC_Inventory_A(p: player):
  GDA_getDeltaLoc({_p}, 1, true) > 0
  GDA_returnTimeSpan({_p}, "FLY") > 2
  GDA_returnTimeSpan({_p}, "GAMEMODE") > 2
  GDA_returnTimeSpan({_p}, "ICE") > 2
  GDA_returnTimeSpan({_p}, "SLIME") > 0.8
  GA_clearly({_p}, "Inventory", "A", "Moving while having inventory open", 5, "A", "NaN", 1, 15) if {GUARD::%{_p}%::TEMP::INVSTATE} is set

function GDC_Ground_A(p: player):
  GDAR_getLastAt({_p}, air, "ATAIR") is not set
  GDA_returnTimeSpan({_p}, "LOWBLOCK") > 0.6
  GDA_getLastBlock({_p}, air, "AIR", 1) >= 0
  GDA_getLastBlock({_p}, air, "AIR", 0.05) >= 0
  GA_clearly({_p}, "Ground", "A", "Impossible ground state", 12, "A", "NaN", 1, 1) if GDA_returnValue({_p}, "GROUNDTICKS") > 1

function GDC_Ground_B(p: player):
  GDA_getLastBlock({_p}, air, "AIR", 1) >= 0
  GDA_getLastBlock({_p}, air, "AIR", 0.05) >= 0
  GDAR_getLastAt({_p}, air, "ATAIR") is not set
  GDA_returnTimeSpan({_p}, "LOWBLOCK") > 0.6
  set metadata value "GUARD-TEMP-TIMESPAN-OFFGROUND" of {_p} to unix timestamp of now if {_p} is not on ground 
  GA_clearly({_p}, "Ground", "B", "Switched ground state too fast", 10, "B", "%difference between metadata value "GUARD-TEMP-TIMESPAN-OFFGROUND" of {_p} and now%", 1, 1) if difference between metadata value "GUARD-TEMP-TIMESPAN-OFFGROUND" of {_p} and now > 0.5

function GDC_AutoClicker_CB(p: player):
  set {_LTIME2} to metadata value "GUARD-TEMP-TIMESPAN-LTIME" of {_p}
  set metadata value "GUARD-TEMP-TIMESPAN-LTIME" of {_p} to unix timestamp of now
  set {_LTIME3} to "%difference between {_LTIME2} and now%"
  replace all "" or "" or " minute" or " minutes" or " hour" or " hours" or " days" or " day" in {_LTIME3} with ""
  set {_LTIME5} to metadata value "GUARD-TEMP-TIMESPAN-LTIME4" of {_p}
  set metadata value "GUARD-TEMP-TIMESPAN-LTIME4" of {_p} to {_LTIME3} parsed as number
  set {_LLastTimeCchecked} to difference between {ltimehigh.%{_p}%} and {ltimelow.%{_p}%}
  set {ltimelow.%{_p}%} to difference between {ltimehigh.%{_p}%} and {ltimelow.%{_p}%} if {ltimelow.%{_p}%} = 0
  set {ltimelow.%{_p}%} to difference between {_LTIME5} and metadata value "GUARD-TEMP-TIMESPAN-LTIME4" of {_p} if difference between {_LTIME5} and metadata value "GUARD-TEMP-TIMESPAN-LTIME4" of {_p} < {ltimelow.%{_p}%}
  set {ltimehigh.%{_p}%} to difference between {_LTIME5} and metadata value "GUARD-TEMP-TIMESPAN-LTIME4" of {_p} if difference between {_LTIME5} and metadata value "GUARD-TEMP-TIMESPAN-LTIME4" of {_p} > {ltimehigh.%{_p}%}
  GA_clearly({_p}, "AutoClicker", "C", "Clicking Patterns", 12, "C", "%difference between {ltimehigh.%{_p}%} and {ltimelow.%{_p}%}%", 1, 9) if difference between {ltimehigh.%{_p}%} and {ltimelow.%{_p}%} = {_LLastTimeCchecked}
  delete {GUARD::%{_p}%::TEMP::VL::AUTOCLICKER.C} if difference between {ltimehigh.%{_p}%} and {ltimelow.%{_p}%} != {_LLastTimeCchecked}
  GA_clearly({_p}, "AutoClicker", "B", "Clicking Patterns", 12, "B", "%difference between {ltimehigh.%{_p}%} and {ltimelow.%{_p}%}%", 1, 7) if difference between {_LTIME5} and metadata value "GUARD-TEMP-TIMESPAN-LTIME4" of {_p} < 0.02
  delete {GUARD::%{_p}%::TEMP::VL::AUTOCLICKER.B} if difference between {_LTIME5} and metadata value "GUARD-TEMP-TIMESPAN-LTIME4" of {_p} > 0.02

function GDC_Flight_A(p: player):
  GDA_returnTimeSpan({_p}, "MOUNT") > 0.6
  GDA_returnTimeSpan({_p}, "PLACE") > 1.2
  GDA_returnTimeSpan({_p}, "SLIMESTOP") > 0.6
  set {GUARD::%{_p}%::TEMP::FLIGHTA::YPOS} to {_p}'s y location
  set {GUARD::%{_p}%::TEMP::MOTIONPREDICTION} to ({GUARD::%{_p}%::TEMP::FLIGHTA::Y} - 0.08) * 0.9800000190734863
  set {GUARD::%{_p}%::TEMP::FLIGHTA::Y} to {GUARD::%{_p}%::TEMP::FLIGHTA::YPOS} - {GUARD::%{_p}%::TEMP::FLIGHTA::YPOS2}
  if {GUARD::%{_p}%::TEMP::FLIGHTA::Y} > 0.05:
    GDA_returnTimeSpan({_p}, "LOWBLOCK") > 0.6
    GDA_returnTimeSpan({_p}, "JUMPBOOST") > 0.6
    set {_buffer} to 5
    add 1.5 to {_buffer} if GDA_returnTimeSpan({_p}, "UNSAFEDAMAGE") < 0.8
    GDA_returnTimeSpan({_p}, "ATLIQUID") > 0.6
    GDAR_getLastAt({_p}, water, "LIQUIDAT") >= 0
    GDAR_getLastAt({_p}, lava, "LIQUIDAT") >= 0
    GA_clearly({_p}, "Flight", "A", "Prediction Spider", 5, "A5", "%{GUARD::%{_p}%::TEMP::FLIGHTA::Y}%", 0.5, {_buffer}) if GDA_returnTimeSpan({_p}, "BUBBLE") > 0.6
  if GDA_getLastBlock({_p}, air, "AIR", 1) >= 0:
    GDA_getLastBlock({_p}, air, "AIR", 0.05) >= 0
    GDAR_getLastAt({_p}, air, "ATAIR") is not set
    set {_buffer} to 6
    add 4 to {_buffer} if GDA_returnTimeSpan({_p}, "UNSAFEDAMAGE") < 0.8
    add ({GUARD::%{_p}%::TEMP::JUMPBOOST}) to {_buffer} if GDA_returnTimeSpan({_p}, "JUMPBOOST") < 0.6
    set {_buffer2} to 5
    add 2 to {_buffer2} if GDA_returnTimeSpan({_p}, "PLACE") < 2
    add ({GUARD::%{_p}%::TEMP::JUMPBOOST}) to {_buffer2} if GDA_returnTimeSpan({_p}, "JUMPBOOST") < 0.6
    set {_buffer3} to 5
    add 1 to {_buffer3} if GDA_returnTimeSpan({_p}, "PLACE") < 2
    set {_buffer5} to 5
    add 3 to {_buffer5} if GDA_returnTimeSpan({_p}, "DAMAGE") < 0.8
    GA_clearly({_p}, "Flight", "A", "Prediction Fly", 5, "A4", "%{GUARD::%{_p}%::TEMP::FLIGHTA::Y}% / %{GUARD::%{_p}%::TEMP::MOTIONPREDICTION}%", 1, {_buffer2}) if {GUARD::%{_p}%::TEMP::FLIGHTA::Y} != {GUARD::%{_p}%::TEMP::MOTIONPREDICTION}
    GA_clearly({_p}, "Flight", "A", "Prediction Fly", 5, "A1", "%{GUARD::%{_p}%::TEMP::FLIGHTA::Y}%", 1, {_buffer}) if {GUARD::%{_p}%::TEMP::FLIGHTA::Y} > 0
    GA_clearly({_p}, "Flight", "A", "Prediction Fly", 5, "A2", "%{GUARD::%{_p}%::TEMP::MOTIONPREDICTION}%", 1, {_buffer3}) if {GUARD::%{_p}%::TEMP::FLIGHTA::Y} > {GUARD::%{_p}%::TEMP::MOTIONPREDICTION}
    GA_clearly({_p}, "Flight", "A", "Prediction Fly", 5, "A3", "%abs({GUARD::%{_p}%::TEMP::FLIGHTA::Y} - {GUARD::%{_p}%::TEMP::MOTIONPREDICTION})%", 1, {_buffer5}) if abs({GUARD::%{_p}%::TEMP::FLIGHTA::Y} - {GUARD::%{_p}%::TEMP::MOTIONPREDICTION}) > 0
  else if GDA_getLastBlock({_p}, air, "AIR", 1) is not set:
    delete {GUARD::%{_p}%::TEMP::VL::FLIGHT.A3}
    delete {GUARD::%{_p}%::TEMP::VL::FLIGHT.A2}
    delete {GUARD::%{_p}%::TEMP::VL::FLIGHT.A1}
    delete {GUARD::%{_p}%::TEMP::VL::FLIGHT.A4}
  if {GUARD::%{_p}%::TEMP::VL::FLIGHT.A5} >= 0.5:
    remove 0.5 from {GUARD::%{_p}%::TEMP::VL::FLIGHT.A5} if {GUARD::%{_p}%::TEMP::FLIGHTA::Y} < 0.05
  set {GUARD::%{_p}%::TEMP::FLIGHTA::YPOS2} to {_p}'s y location

function GDC_AutoClicker_AD(p: player):
  set {_RTIME2} to metadata value "GUARD-TEMP-TIMESPAN-RTIME" of {_p}
  set metadata value "GUARD-TEMP-TIMESPAN-RTIME" of {_p} to unix timestamp of now
  set {_RTIME3} to "%difference between {_RTIME2} and now%"
  replace all "" or "" or " minute" or " minutes" or " hour" or " hours" or " days" or " day" in {_RTIME3} with ""
  set {_RTIME5} to metadata value "GUARD-TEMP-TIMESPAN-RTIME4" of {_p}
  set metadata value "GUARD-TEMP-TIMESPAN-RTIME4" of {_p} to {_RTIME3} parsed as number
  set {_RLastTimeCchecked} to difference between {Rtimehigh.%{_p}%} and {Rtimelow.%{_p}%}
  set {Rtimelow.%{_p}%} to difference between {Rtimehigh.%{_p}%} and {Rtimelow.%{_p}%} if {Rtimelow.%{_p}%} = 0
  set {Rtimelow.%{_p}%} to difference between {_RTIME5} and metadata value "GUARD-TEMP-TIMESPAN-RTIME4" of {_p} if difference between {_RTIME5} and metadata value "GUARD-TEMP-TIMESPAN-RTIME4" of {_p} < {Rtimelow.%{_p}%}
  set {Rtimehigh.%{_p}%} to difference between {_RTIME5} and metadata value "GUARD-TEMP-TIMESPAN-RTIME4" of {_p} if difference between {_RTIME5} and metadata value "GUARD-TEMP-TIMESPAN-RTIME4" of {_p} > {Rtimehigh.%{_p}%}
  GA_clearly({_p}, "AutoClicker", "D", "Clicking Patterns", 12, "D", "%difference between {Rtimehigh.%{_p}%} and {Rtimelow.%{_p}%}%", 1, 9) if difference between {Rtimehigh.%{_p}%} and {Rtimelow.%{_p}%} = {_RLastTimeCchecked}
  delete {GUARD::%{_p}%::TEMP::VL::AUTOCLICKER.D} if difference between {Rtimehigh.%{_p}%} and {Rtimelow.%{_p}%} != {_RLastTimeCchecked}
  GA_clearly({_p}, "AutoClicker", "A", "Clicking Patterns", 12, "A", "%difference between {Rtimehigh.%{_p}%} and {Rtimelow.%{_p}%}%", 1, 7) if difference between {_RTIME5} and metadata value "GUARD-TEMP-TIMESPAN-RTIME4" of {_p} < 0.003
  delete {GUARD::%{_p}%::TEMP::VL::AUTOCLICKER.A} if difference between {_RTIME5} and metadata value "GUARD-TEMP-TIMESPAN-RTIME4" of {_p} > 0.003

function GDC_BadPacket_C(p: player):
  GA_clearly({_p}, "BadPacket", "C", "Sped up time", 50, "C", "%{GUARD::%{_p}%::TEMP::VL::TIMER.A}%", 1, 50)

function GA_clearly(p: player, cheat: text, type: text, dev: text, vl: number, tpvl: text, v: text, bufferadd: number, buffer: number):
  stop
  GDA_returnTimeSpan({_p}, "FLY") > 3
  GDA_returnTimeSpan({_p}, "GAMEMODE") > 3
  {_p}'s gamemode is not creative or spectator
  if {_p}'s name contains "*":
    stop if {@IgnoreBedrock} is true
  fly mode of {_p} is false
  {GUARD::CHECK::%{_cheat}%.%{_tpvl}%} is not set
  add {_bufferadd} to {GUARD::%{_p}%::TEMP::VL::%{_cheat}%.%{_tpvl}%}
  set {GUARD::%{_p}%::TEMP::VL::%{_cheat}%.%{_tpvl}%} to 1 if {_buffer} = 0
  {GUARD::%{_p}%::TEMP::VL::%{_cheat}%.%{_tpvl}%} > {_buffer}
  add 1 to {GUARD::%{_p}%::VL::%{_cheat}%.%{_tpvl}%}
  loop all players:
    send formatted "<tooltip:&7Check: &9%{_cheat}% &7(%{_tpvl}%&7)%nl%&7Value: &9%{_v}% %nl%&7Informations: &9%{_dev}%%nl%&7Buffer: &9%{GUARD::%{_p}%::TEMP::VL::%{_cheat}%.%{_tpvl}%}%&7/&9%{_buffer}%%nl%%nl%        &7&nClick to teleport !><cmd: /tp %{_p}%>{@guard} &f%{_p}%&7 failed &f%{_cheat}% %{_type}% &7(&9x%{GUARD::%{_p}%::VL::%{_cheat}%.%{_tpvl}%}%&7)" to loop-player if {GUARD::%loop-player%::ALERTS} is true
  if {@TestServer} = true:
    send title "&cYou would be kicked by now." with subtitle "{@guard} &fUnfair Advantage" to {_p} if {GUARD::%{_p}%::VL::%{_cheat}%.%{_type}%} >= {_vl}
  if {@AutoKick} is true:
    kick {_p} due to "{@guard} &fUnfair Advtange." if {GUARD::%{_p}%::VL::%{_cheat}%.%{_type}%} >= {_vl} 

function GDAR_getLastAirAbove(p: player, h: number, v: text):
  if block {_h} above north {_p} is air or void air:
    if block {_h} above south {_p} is air or void air:
      if block {_h} above west {_p} is air or void air:
        if block {_h} above east {_p} is air or void air:
          if block {_h} above {_p} is air or void air:
            if block {_h} above north east {_p} is air or void air:
              if block {_h} above north west {_p} is air or void air:
                if block {_h} above south east {_p} is air or void air:
                  if block {_h} above south west {_p} is air or void air:
                    stop
  set metadata value "GUARD-TEMP-TIMESPAN-%{_v}%" of {_p} to unix timestamp of now

function GDAR_getLastAt(p: player, b: item type, v: text) :: number:
  block above north {_p} is not {_b}:
    block above south {_p} is not {_b}:
      block above west {_p} is not {_b}:
        block above east {_p} is not {_b}:
          block above {_p} is not {_b}:
            block above north east {_p} is not {_b}:
              block above north west {_p} is not {_b}:
                block above south east {_p} is not {_b}:
                  block above south west {_p} is not {_b}:
                    set metadata value "GUARD-TEMP-TIMESPAN-%{_v}%" of {_p} to unix timestamp of now
                    return difference between metadata value "GUARD-TEMP-TIMESPAN-%{_v}%" of {_p} and unix timestamp of now

function GDAR_getLastAtAir(p: player):
  set {_b} to {_p}'s location
  set metadata value "GUARD-TEMP-TIMESPAN-ATLIQUID" of {_p} to unix timestamp of now if block at {_b} is water or lava
  block at {_b} is air or water or lava:
    add 1 to z location of {_b}
    set metadata value "GUARD-TEMP-TIMESPAN-ATLIQUID" of {_p} to unix timestamp of now if block at {_b} is water or lava
    block at {_b} is air or water or lava:
      remove 2 from z location of {_b}
      set metadata value "GUARD-TEMP-TIMESPAN-ATLIQUID" of {_p} to unix timestamp of now if block at {_b} is water or lava
      block at {_b} is air or water or lava:
        add 1 to z location of {_b}
        add 1 to x location of {_b}
        set metadata value "GUARD-TEMP-TIMESPAN-ATLIQUID" of {_p} to unix timestamp of now if block at {_b} is water or lava
        block at {_b} is air or water or lava:
          remove 2 from x location of {_b}
          set metadata value "GUARD-TEMP-TIMESPAN-ATLIQUID" of {_p} to unix timestamp of now if block at {_b} is water or lava
          block at {_b} is air or water or lava:
            add 1 to z location of {_b}
            set metadata value "GUARD-TEMP-TIMESPAN-ATLIQUID" of {_p} to unix timestamp of now if block at {_b} is water or lava
            block at {_b} is air or water or lava:
              remove 2 from z location of {_b}
              set metadata value "GUARD-TEMP-TIMESPAN-ATLIQUID" of {_p} to unix timestamp of now if block at {_b} is water or lava
              block at {_b} is air or water or lava:
                add 2 to x location of {_b}
                set metadata value "GUARD-TEMP-TIMESPAN-ATLIQUID" of {_p} to unix timestamp of now if block at {_b} is water or lava
                block at {_b} is air or water or lava:
                  add 2 to z location of {_b}
                  set metadata value "GUARD-TEMP-TIMESPAN-ATLIQUID" of {_p} to unix timestamp of now if block at {_b} is water or lava
                  block at {_b} is air or water or lava:
                    set metadata value "GUARD-TEMP-TIMESPAN-ATLIQUID" of {_p} to unix timestamp of now if block at {_b} is water or lava
                    stop
  set metadata value "GUARD-TEMP-TIMESPAN-ATAIR" of {_p} to unix timestamp of now

on step on flower pot or carpet or slime block or soul sand or snow layers or brewing stand or slabs or stairs or cake or any bed or fence or flower pot or Weeping Vine or Weeping Vine block or ladder or vines or twisting vine block or twisting vine or snow layers:
  set metadata value "GUARD-TEMP-TIMESPAN-LOWBLOCK" of {_p} to unix timestamp of now

function GDAR_getLastBlock(p: player):
  if block 0.75 or 1 or 0.5 or 0.05 below {_p} is not flower pot or carpet or slime block or soul sand or snow layers or brewing stand or slabs or stairs or cake or any bed or fence or flower pot or Weeping Vine or Weeping Vine block or ladder or vines or twisting vine block or twisting vine or snow layers:
    if block 0.75 or 1 or 0.5 or 0.05 below north {_p} is not flower pot or carpet or slime block or soul sand or snow layers or brewing stand or slabs or stairs or cake or any bed or fence or flower pot or Weeping Vine or Weeping Vine block or ladder or vines or twisting vine block or twisting vine or snow layers:
      if block 0.75 or 1 or 0.5 or 0.05 below south {_p} is not flower pot or carpet or slime block or soul sand or snow layers or brewing stand or slabs or stairs or cake or any bed or fence or flower pot or Weeping Vine or Weeping Vine block or ladder or vines or twisting vine block or twisting vine or snow layers:
        if block 0.75 or 1 or 0.5 or 0.05 below west {_p} is not flower pot or carpet or slime block or soul sand or snow layers or brewing stand or slabs or stairs or cake or any bed or fence or flower pot or Weeping Vine or Weeping Vine block or ladder or vines or twisting vine block or twisting vine or snow layers:
          if block 0.75 or 1 or 0.5 or 0.05 below east {_p} is not flower pot or carpet or slime block or soul sand or snow layers or brewing stand or slabs or stairs or cake or any bed or fence or flower pot or Weeping Vine or Weeping Vine block or ladder or vines or twisting vine block or twisting vine or snow layers:
            if block 0.75 or 1 or 0.5 or 0.05 below north east {_p} is not flower pot or carpet or slime block or soul sand or snow layers or brewing stand or slabs or stairs or cake or any bed or fence or flower pot or Weeping Vine or Weeping Vine block or ladder or vines or twisting vine block or twisting vine or snow layers:
              if block 0.75 or 1 or 0.5 or 0.05 below north west {_p} is not flower pot or carpet or slime block or soul sand or snow layers or brewing stand or slabs or stairs or cake or any bed or fence or flower pot or Weeping Vine or Weeping Vine block or ladder or vines or twisting vine block or twisting vine or snow layers:
                if block 0.75 or 1 or 0.5 or 0.05 below south east {_p} is not flower pot or carpet or slime block or soul sand or snow layers or brewing stand or slabs or stairs or cake or any bed or fence or flower pot or Weeping Vine or Weeping Vine block or ladder or vines or twisting vine block or twisting vine or snow layers:
                  if block 0.75 or 1 or 0.5 or 0.05 below south west {_p} is not flower pot or carpet or slime block or soul sand or snow layers or brewing stand or slabs or stairs or cake or any bed or fence or flower pot or Weeping Vine or Weeping Vine block or ladder or vines or twisting vine block or twisting vine or snow layers:
                    stop
  set metadata value "GUARD-TEMP-TIMESPAN-LOWBLOCK" of {_p} to unix timestamp of now

function GDA_getLastBlock(p: player, b: item type, v: text, h: number) :: time span:
  if block {_h} below {_p} is {_b}:
    if block {_h} below north {_p} is {_b}:
      if block {_h} below south {_p} is {_b}:
        if block {_h} below west {_p} is {_b}:
          if block {_h} below east {_p} is {_b}:
            if block {_h} below north east {_p} is {_b}:
              if block {_h} below north west {_p} is {_b}:
                if block {_h} below south east {_p} is {_b}:
                  if block {_h} below south west {_p} is {_b}:
                    set metadata value "GUARD-TEMP-TIMESPAN-%{_v}%" of {_p} to unix timestamp of now
                    set {_h} to difference between metadata value "GUARD-TEMP-TIMESPAN-%{_v}%" of {_p} and unix timestamp of now 
                    return {_h}
                    stop
function GDA_getLastBlockReversed(p: player, b: item type, v: text, h: number) :: number:
  if block {_h} below {_p} is not {_b}:
    if block {_h} below north {_p} is not {_b}:
      if block {_h} below south {_p} is not {_b}:
        if block {_h} below west {_p} is not {_b}:
          if block {_h} below east {_p} is not {_b}:
            if block {_h} below north east {_p} is not {_b}:
              if block {_h} below north west {_p} is not {_b}:
                if block {_h} below south east {_p} is not {_b}:
                  if block {_h} below south west {_p} is not {_b}:
                    stop
  set metadata value "GUARD-TEMP-TIMESPAN-%{_v}%" of {_p} to unix timestamp of now
  return difference between metadata value "GUARD-TEMP-TIMESPAN-%{_v}%" of {_p} and unix timestamp of now
every 2 second:
  loop all players:
    set {Rtimehigh.%loop-player%} to 0
    set {Rtimelow.%loop-player%} to 0
every 1.5 second:
  loop all players:
    set {Ltimelow.%loop-player%} to 0
    set {Ltimehigh.%loop-player%} to 0
    delete {GUARD::%loop-player%::TEMP::VL::BADPACKET.C}
    delete {GUARD::%loop-player%::TEMP::VL::KILLAURA.C}

on join:
   while player is online:
      delete {GUARD::%player%::VL::*}
      wait 2 minutes

function GDAR_SlimeHandler(p: player):
  set {_slime} to true if GDA_getLastBlockReversed({_p}, slime block, "SLIME", 1) >= 0
  delete {_slime} if block under {_p} is not air or slime block or water or lava
  {_slime} is set
  set {_Time} to "%(fall distance of {_p})%" if block under {_p} is air
  set metadata value "GUARD-TEMP-TIMESPAN-SLIMESTOP" of {_p} to unix timestamp of now if {_Time} = 0

on damage:
   set metadata value "GUARD-TEMP-TIMESPAN-UNSAFEDAMAGE" of victim to unix timestamp of now
   if tool of the attacker is enchanted with knockback:
      set metadata value "GUARD-TEMP-KBENCHANT" of victim to enchantment level of knockback of attacker's tool
      set metadata value "GUARD-TEMP-TIMESPAN-KBDAMAGE" of victim to unix timestamp of now
   "%damage cause%" is "ATTACK"
   set metadata value "GUARD-TEMP-TIMESPAN-DAMAGE" of {_p} to unix timestamp of now if attacker is not victim

function GDA_getDeltaLoc(p: player, n: number, y: boolean) :: number:
  set y location of metadata value "GUARD-TEMP-PRELOC-%{_n}%" of {_p} to y location of metadata value "GUARD-TEMP-LOC-%{_n}%" of {_p} if {_y} is true
  return distance between metadata value "GUARD-TEMP-PRELOC-%{_n}%" of {_p} and metadata value "GUARD-TEMP-LOC-%{_n}%" of {_p}

function GDA_getDeltaZ(p: player, n: number) :: number:
  return difference between z location of metadata value "GUARD-TEMP-PRELOC-%{_n}%" of {_p} and z location of metadata value "GUARD-TEMP-LOC-%{_n}%" of {_p}

function GDA_getDeltaX(p: player, n: number) :: number:
  return difference between x location of metadata value "GUARD-TEMP-PRELOC-%{_n}%" of {_p} and x location of metadata value "GUARD-TEMP-LOC-%{_n}%" of {_p}

function GDA_getDeltaPitch(p: player, n: number) :: number:
  return difference between metadata value "GUARD-TEMP-PRELOC-%{_n}%" of {_p}'s pitch and metadata value "GUARD-TEMP-LOC-%{_n}%" of {_p}'s pitch

function GDA_getDeltaYaw(p: player, n: number) :: number:
  return difference between metadata value "GUARD-TEMP-PRELOC-%{_n}%" of {_p}'s yaw and metadata value "GUARD-TEMP-LOC-%{_n}%" of {_p}'s yaw

function GDA_getDeltaY(p: player, n: number, r: boolean) :: number:
  return y location of metadata value "GUARD-TEMP-LOC-%{_n}%" of {_p} - y location of metadata value "GUARD-TEMP-PRELOC-%{_n}%" of {_p} if {_r} is false
  return difference between y location of metadata value "GUARD-TEMP-PRELOC-%{_n}%" of {_p} and y location of metadata value "GUARD-TEMP-LOC-%{_n}%" of {_p} if {_r} is true

function GDA_returnTimeSpan(p: player, t: text) :: number:
  return difference between metadata value "GUARD-TEMP-TIMESPAN-%{_t}%" of {_p} and unix timestamp of now

function GDA_returnValue(p: player, t: text) :: number:
  return metadata value "GUARD-TEMP-%{_t}%" of {_p}

on any move:

  if difference between metadata value "GUARD-TEMP-TIMESPAN-SYNC" of player and now < 3:
    cancel event
    stop

  set metadata value "GUARD-TEMP-PRELOC-2" of player to metadata value "GUARD-TEMP-LOC-2" of player
  set metadata value "GUARD-TEMP-LOC-2" of player to metadata value "GUARD-TEMP-PRELOC1" of player
  set metadata value "GUARD-TEMP-PRELOC1" of player to metadata value "GUARD-TEMP-LOC-1" of player
  set metadata value "GUARD-TEMP-LOC-1" of player to location of player

  GDAR_getLastAtAir(player)
  GDAR_SlimeHandler(player)
  GDAR_getLastAirAbove(player, 2.5, "ABOVETICKS")
  GDAR_getLastAirAbove(player, 1, "ABOVEAT")
  GDAR_getLastBlock(player)

  GDC_Flight_A(player)
  GDC_Clip_A(player)
  GDC_FastClimb_A(player)
  GDC_Motion_A(player)
  GDC_Motion_B(player)
  GDC_Motion_C(player)
  GDC_Motion_D(player)
  GDC_Jesus_A(player)
  GDC_Jesus_C(player)
  GDC_Step_A(player)
  GDC_Ground_A(player)
  GDC_Ground_B(player)
  GDC_Ground_C(player)
  GDC_Ground_D(player)
  GDC_Strafe_AB(player)
  GDC_Speed_A(player)
  GDC_Inventory_A(player)
  GDC_BadPacket_A(player)
  GDC_BadPacket_B(player)
  GDC_BadPacket_C(player)

  set metadata value "GUARD-TEMP-TIMESPAN-MOUNT" of player to unix timestamp of now if player is riding

  if player have jump boost:
    set metadata value "GUARD-TEMP-JUMPBOOST" of player to tier of potion effect jump boost of player
    set metadata value "GUARD-TEMP-TIMESPAN-JUMPBOOST" of player to unix timestamp of now
    set metadata value "GUARD-TEMP-HASJUMPBOOST" of player to true
  else: 
    if player is not on ground:
      if metadata value "GUARD-TEMP-HASJUMPBOOST" of player is true:
        set metadata value "GUARD-TEMP-TIMESPAN-JUMPBOOST" of player to unix timestamp of now
    else:
      delete metadata value "GUARD-TEMP-HASJUMPBOOST" of player

  set metadata value "GUARD-TEMP-TIMESPAN-SOULSAND" of player to unix timestamp of now if block under player is soul sand

  set metadata value "GUARD-TEMP-TIMESPAN-SPEEDPOT" of player to unix timestamp of now if block under player is ice or packed ice or blue ice

  set metadata value "GUARD-TEMP-TIMESPAN-SLIME" of player to unix timestamp of now if block under player is slime block

  set metadata value "GUARD-TEMP-TIMESPAN-FLY" of player to unix timestamp of now if player is flying

  set metadata value "GUARD-TEMP-TIMESPAN-JUMPBOOST-GAMEMODE" of player to unix timestamp of now if player's gamemode is spectator or creative

  set metadata value "GUARD-TEMP-TIMESPAN-SPEED" of player to unix timestamp of now if player have speed

  set metadata value "GUARD-TEMP-AIRTICKS" of player to (metadata value "GUARD-TEMP-AIRTICKS" of player + 1) if player is not on ground
  set metadata value "GUARD-TEMP-AIRTICKS" of player to 0 if player is on ground

  set metadata value "GUARD-TEMP-GROUNDTICKS" of player to (metadata value "GUARD-TEMP-GROUNDTICKS" of player + 1) if player is on ground
  set metadata value "GUARD-TEMP-GROUNDTICKS" of player to 0 if player is not on ground

  set metadata value "GUARD-TEMP-CLIMABLETICKS" of player to (metadata value "GUARD-TEMP-CLIMABLETICKS" of player + 1) if block at player is vines or ladders or Weeping vine or Weeping Vine block or twisting vine block or twisting vine
  set metadata value "GUARD-TEMP-CLIMABLETICKS" of player to 0 if block at player is not vines or ladders or Weeping vine or Weeping Vine block or twisting vine block or twisting vine

on left click:
  GDC_AutoClicker_CB(player)

on right click:
  GDC_AutoClicker_AD(player)

on mount:
  set metadata value "GUARD-TEMP-MOUNTSTATE" of player to true
on dismount:
  delete metadata value "GUARD-TEMP-MOUNTSTATE" of player
on place:
  set metadata value "GUARD-TEMP-TIMESPAN-PLACE" of player to unix timestamp of now

on join:
   set metadata value "GUARD-TEMP-TIMESPAN-SYNC" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-LOWBLOCK" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-UNSAFEDAMAGE" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-ABOVETICKS" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-ATABOVE" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-SOULSAND" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-SLIME" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-MOUNT" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-ATLIQUID" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-BUBBLE" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-LIQUIDAT" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-SLIMESTOP" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-JUMPBOOST" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-FLY" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-JUMPBOOST-GAMEMODE" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-SPEEDPOT" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-PLACE" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-ATAIR" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-KBDAMAGE" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-DAMAGE" of player to unix timestamp of now
   set metadata value "GUARD-TEMP-TIMESPAN-SPEEDPOT" of player to unix timestamp of now
   delete metadata value "GUARD-TEMP-INVSTATE" of player

command /guard [<text>] [<player>]:
  trigger:
    if arg 1 is not set:
      send ""
      send "{@guard} List of commands:"
      send ""
      send "&f/guard alerts &7- &fToggles Alerts"
      send "&f/guard kick [PLAYER] &7- &fKick a player using GUARD"
      send "&f/guard version &7- &fReturns GUARD's version"
      send "&f/guard clearcache &7- &fClear GUARD's cache &4â "
      send "&f/guard clearvls &7- &fClear buffers and violations"
      send ""
    if arg 1 is "alerts":
      if player doesn't have permission "{@AlertsPermission}":
        send "{@guard} &cMissing Permission."
        stop
      set {GUARD::%player%::ALERTS} to true if {GUARD::%player%::ALERTS} is not set
      if {GUARD::%player%::ALERTS} is false:
        set {GUARD::%player%::ALERTS} to true
        send "{@guard} Alerts output &aenabled" 
        stop 
      if {GUARD::%player%::ALERTS} is true:
        set {GUARD::%player%::ALERTS} to false 
        send "{@guard} Alerts output &cdisabled"
        stop
    if arg 1 is "version":
      if player doesn't have permission "{@VersionPermission}":
        send "{@guard} &cMissing Permission."
        stop
      send "{@guard} Running &7{@version}"
    if arg 1 is "kick":
      if player doesn't have permission "{@KickPermission}":
        send "{@guard} &cMissing Permission."
        stop
      send "{@guard} &cUsage: /guard kick [PLAYER]" if arg 2 is not set
      if arg 2 is set:
        kick arg 2 due to "{@guard} &fYou were kicked for &cUnfair Advantage"
        send "{@guard} &c%arg 2% has been kicked." to player
    if arg 1 is "clearcache":
      if player doesn't have permission "{@ClearCachePermission}":
        send "{@guard} &cMissing Permission."
        stop
      if {GUARD::%player%::TEMP::CACHECMD} is not set:
        send "{@guard} &4â  &cWarning! Are you sure to do this action ? It's irreversible. To confirm retype the command."
        set {GUARD::%player%::TEMP::CACHECMD} to unix timestamp of now
        wait 10 second
        send "{@guard} Cache clear command has expired." to player if difference between {GUARD::%player%::TEMP::CACHECMD} and now > 9.9 seconds
        delete {GUARD::%player%::TEMP::CACHECMD}
        stop
      if {GUARD::%player%::TEMP::CACHECMD} is set:
        delete {GUARD::%player%::TEMP::CACHECMD}
        send "{@guard} &6Clearing cache..."
        delete {GUARD::*}
        send "{@guard} &aCache cleared â"
        stop
    if arg 1 is "clearvls":
      if player doesn't have permission "{@ClearVlsCachePermission}":
        send "{@guard} &cMissing Permission."
        stop
      delete {GUARD::%player%::TEMP::VL::*}
      delete {GUARD::%player%::VL::*}
      send "{@guard} &aBuffers and violations reseted â"